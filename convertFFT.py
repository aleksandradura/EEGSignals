import os
import numpy as np # linear algebra
import pandas as pd # data processing
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.signal import welch
from scipy.fft import fft, ifft
from scipy import fftpack
import sys
import numpy
import collections
import shutil

oneRowFile = 'C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\arffFiles\\OneRowFile.csv'
toFile = 'C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\asdf.csv'
file = "C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\xyz.csv"
fftValues = "C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\fftValues.csv"
a = "C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\aaa.csv"
b = "C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\bbb.csv"
label0 = 'C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\0.csv'
label1 = 'C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\1.csv'
k = 'C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\k.csv'
q = "C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\q.csv"

#dla wszystkich
# valence = ['1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '0', '1', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '0', '1', '1', '0', '1', '0', '1', '1', '0', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '1', '1', '1', '1', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '1', '0', '1', '0', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '0', '0', '1', '0', '1', '0', '1', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '1', '0', '1', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '1', '1', '0', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '1', '0', '0', '1', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '1', '1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '1', '1', '1', '1', '0', '0', '1', '0', '1', '1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1']
# arousal = ['1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '0', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '1', '1', '0', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0', '1', '1', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '1', '1', '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '1', '0', '1', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '1', '0', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '0', '0', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '1', '1', '0', '1', '0', '0', '0', '1', '0', '1', '1', '0', '0', '0', '1', '1', '0', '1', '0', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '1', '0', '1', '1', '0', '0', '0', '1', '1', '0', '1', '0', '0', '1', '1', '1', '0', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '0', '1', '0', '1', '1', '0', '1', '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', '1', '1', '1', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '1', '1', '1', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '0', '1', '0', '1', '1', '0', '0', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0']
# valence = ['6.97', '9.0', '4.95', '8.24', '3.04', '8.09', '5.12', '8.17', '6.94', '3.03', '9.0', '7.08', '4.94', '7.21', '6.97', '5.96', '6.88', '8.05', '8.03', '7.0', '4.0', '6.99', '1.0', '4.0', '5.96', '7.96', '7.0', '3.9', '4.04', '2.94', '6.9', '1.94', '5.17', '6.03', '4.86', '4.91', '1.91', '1.0', '1.0', '7.0']

# arousal = ['4.9', '9.0', '4.88', '5.08', '4.01', '7.08', '6.97', '5.91', '4.95', '4.0', '6.0', '4.03', '2.88', '4.01', '6.05', '5.04', '2.96', '3.97', '4.97', '1.99', '2.87', '7.95', '7.05', '5.04', '4.87', '3.0', '1.99', '4.08', '3.01', '8.1', '6.04', '4.12', '9.0', '6.97', '8.1', '9.0', '7.01', '3.91', '4.86', '6.96']
# ix_rows = ['342', '1890', '2594', '4328', '4341', '5700', '5784', '7537', '8254', '10209', '12198', '13956', '15552', '17072', '17556', '17732', '20471', '21012', '23155', '23735', '24315', '24390', '25508', '30589', '32682', '32797', '32824', '33256', '33401', '34582', '34593', '36507', '38118', '42868', '43109', '46279', '49398', '49771', '51776', '52989', '53091', '53120', '53446', '57306', '59516', '60857', '61468', '62280', '62683', '62897', '66838', '73266', '75378', '78245', '82276', '83774', '87930', '89795', '92216', '96177', '100496', '103416', '105534', '106590', '108023', '108451', '110909', '113502', '115252', '119728', '120785', '123470', '130116', '131842', '132733', '132824', '133077', '133458', '134287', '135994', '136114', '136217', '137957', '143422', '145172', '145364', '146980', '147520', '147810', '152117', '152827', '154814', '156506', '159409', '159446', '162342', '163984', '172632', '173711', '174884', '176049', '178327', '178756', '178776', '179532', '179814', '181485', '183124', '183996', '185774', '188483', '189913', '191887', '194999', '197330', '197677', '199930', '202601']
valence = ['7.91', '3.55', '5.86', '7.01', '7.24', '7.1', '8.96', '5.68', '7.56', '5.94', '8.99', '5.37', '6.72', '8.81', '5.31', '3.85', '4.95', '7.31', '7.82', '5.58', '2.97', '4.24', '2.87', '6.82', '1.92', '4.95', '4.94', '4.31', '3.94', '2.64', '4.15', '5.96', '4.94', '3.91', '1.38', '2.17', '2.92', '1.91', '2.17', '5.78']
arousal = ['6.15', '5.76', '4.45', '5.91', '6.23', '6.0', '7.58', '4.05', '6.21', '6.0', '7.14', '4.37', '3.64', '4.91', '2.88', '2.83', '3.96', '3.44', '5.19', '3.26', '5.22', '2.96', '4.24', '2.03', '4.01', '1.68', '2.97', '3.87', '2.97', '5.04', '5.49', '7.47', '5.73', '5.95', '5.97', '6.18', '6.26', '5.46', '6.21', '6.15']
file_x = 'C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\arffFiles\\RandomTree.csv'
onlyRowNumbforThreeCol = 'C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\onlyRowNumbforThreecol.csv'
f = open("C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\xyz.csv", "a")
df_ch1 = pd.read_csv("C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\arffFiles\\allChannels.csv", sep=' ', low_memory=False)
# df_ch1.columns = ['ch1', 'ch2', 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'ch9', 'ch10', 'ch11', 'ch12', 'ch13', 'ch14', 'ch15', 'ch16', 'ch17', 'ch18', 'ch19', 'ch20', 'ch21', 'ch22', 'ch23', 'ch24', 'ch25', 'ch26', 'ch27', 'ch28', 'ch29', 'ch30', 'ch31', 'ch32', 'ch33']
# df_ch1.columns = ['ch1', 'ch2', 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'ch9', 'ch10', 'ch11', 'ch12', 'ch13', 'ch14', 'ch15', 'ch16', 'ch17', 'ch18', 'ch19', 'ch20', 'ch21', 'ch22', 'ch23', 'ch24', 'ch25', 'ch26', 'ch27', 'ch28', 'ch29']
df_ch1.columns = ['ch1', 'ch2', 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'ch9', 'ch10', 'ch11', 'ch12']
listOfthresholds = []
# print(df_ch1.head())
def threshold():
    for k in range(40):
        listOfthresholds.append((k + 1) * 7680)
    return listOfthresholds
t = threshold()


def cleanFile(copiedFile):
    f = open(copiedFile, 'r+')
    # f.seek(0)
    f.truncate()
    f.close()
#counting 0 and 1

def select0or1LabelValues(x, numb, file):
    cleanFile(x)
    for z in range(len(numb)):
        for l in range(len(t)):
            if int(numb[z]) < int(t[l]):
                # print(str(z) + ' : ' + str(ix_rows[z]) + ' - ' + str(l ) + ' - ' + str(t[l]))
                with open(x, 'a') as lab:
                    lab.write(file[l])
                    lab.write('\n')
                    break

def removeSecondPart():
    for key in list(datW.keys()):
        if key > 3839:
            datW.pop(key)
    return datW

def removeSmallValues():
    for key in list(datW.keys()):
        if float(datW[key]) < 0.0001:
            datW.pop(key)
            # print(str(datW[key]))
    return datW
#zapisać jeszcze odrębne wiersze ix_freq do pliku innego
def sortDict():
    list = []
    od = collections.OrderedDict(sorted(datW.items()))
    with open(file, "w") as f1:
        for keys, values in od.items():
            f1.write(str(values) + ' ')
            f1.write('\n')

def sortDictByRow():
    list = []
    od = collections.OrderedDict(sorted(datW.items()))
    with open(onlyRowNumbforThreeCol, "w") as f1:
        for keys, values in od.items():
            f1.write(str(keys) + ' ')
            f1.write('\n')


def countingRows(oneRowFile, file):
    num_lines1 = sum(1 for line in open(oneRowFile))
    num_lines2 = sum(1 for line in open(file))
    if int(num_lines1) < int(num_lines2):
        amount = num_lines1
    else:
        amount = num_lines2
    return amount


def mergeLabelsWithChannels(oneRowFile, toFile, file):
    with open(file) as xh:
        with open(oneRowFile) as yh:
            with open(toFile, "w") as zh:
                xlines = xh.readlines()
                ylines = yh.readlines()
                for i in range(countingRows(oneRowFile, file)):
                        line = ylines[i].strip() + ' ' + xlines[i]
                        zh.write(line)

def copyToOtherFile(oneRowFile, toFile):
    with open(toFile) as f:
        with open(oneRowFile, "w") as f1:
            for line in f:
                f1.write(line)

def selectNumberOfTheSameRows():
    # headers = ['1', '2', '3', '4', '5']
    ix = pd.read_csv("C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\bbb.csv", sep=' ')
    ix.columns = ['1', '2', '3', '4']
    x1 = ix['1'].tolist()
    x2 = ix['2'].tolist()
    x3 = ix['3'].tolist()
    # x4 = ix['4'].tolist()
    # x5 = ix['5'].tolist()
    # x6 = ix['6'].tolist()

    lis = []
    for i in range(len(x1)):
        for j in range(len(x2)):
            if x1[i] == x2[j]:
                for k in range(len(x3)):
                    if x1[i] == x3[k]:
                        # for z in range(len(x4)):
                        #     if x1[i] == x4[z]:
                        #         print(str(x1[i]) + ' ' + str(x2[j]))
                                # for p in range(len(x5)):
                                #     if x1[i] == x5[p]:
                                #         for g in range(len(x6)):
                                #             if x1[i] == x6[g]:
                                                print(str(x1[i]) + ' ' + str(x2[j]) + ' ' + str(x3[k]))
                                                lis.append(x1[i])
    return lis
# print(selectNumberOfTheSameRows())
def fastFourierTransform():
    #transform to frequency-domain
    fs = 128

    # The FFT of the signal
    sig_fft = fftpack.fft(df_ch1[[df_ch1.columns.values[col]]])

    # And the power (sig_fft is of complex dtype)
    power = np.abs(sig_fft)**2

    # The corresponding frequencies
    sample_freq = fftpack.fftfreq(df_ch1.size+1, d=1./fs)

    return power, sample_freq

def sf():
    with open(file_x, 'a') as pq:
        pq.write(' '.join(map(str, power[freq_ix][i])))
        pq.write('\n')


amount = 1
for col in range(len(list(df_ch1.columns.values)) - 1):
    power, sample_freq = fastFourierTransform()

    # Define EEG bands
    eeg_bands = {
                'Delta': (0, 4),
                 'Theta': (4, 8),
                 'Alpha': (8, 13),
                 'Beta': (13, 30),
                 'Gamma': (30, 15000000)
    }

    datW = {}
    df_subbands = pd.DataFrame(columns=["Delta", "Theta", "Alpha", "Beta", "Gamma"])

    # numpy.set_printoptions(threshold=sys.maxsize)
    # Take the mean of the fft amplitude for each EEG band. Enter subbands into dataframe
    eeg_band_fft = dict()
    cleanFile(file_x)
    for band in eeg_bands:
        freq_ix = np.where((abs(power) >= eeg_bands[band][0]) &
                           (abs(power) <= eeg_bands[band][1]))[0]
        # print(band)
        # print(str(freq_ix))
        # print(" fft_vals[freq_ix]= " + str(power[freq_ix]))

        print("razem= " + str(np.count_nonzero(sample_freq[freq_ix])))
        for i in range(np.count_nonzero(sample_freq[freq_ix])):
            datW[freq_ix[i]] = ' '.join(map(str, power[freq_ix][i]))



    if df_ch1.columns.values[col] == 'ch1':
        cleanFile(oneRowFile)
        cleanFile(file)
        cleanFile(a)
        cleanFile(onlyRowNumbforThreeCol)
        sortDict()
        copyToOtherFile(oneRowFile, file)
        sortDictByRow()
        copyToOtherFile(a, onlyRowNumbforThreeCol)
        print(amount)
    else:
    # if df_ch1.columns.values[col] == 'ch3':
        cleanFile(onlyRowNumbforThreeCol)
        cleanFile(file)
        sortDict()
        mergeLabelsWithChannels(oneRowFile, toFile, file)
        copyToOtherFile(oneRowFile, toFile)
        sortDictByRow()
        mergeLabelsWithChannels(a, b, onlyRowNumbforThreeCol)
        copyToOtherFile(a, b)
        amount += 1
        print(amount)

# numb = selectNumberOfTheSameRows()
# print(numb)
# select0or1LabelValues(label0, ix_rows, valence)
# select0or1LabelValues(label1, ix_rows, arousal)

def takeR(n):
    df = pd.read_csv("C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\bbb.csv", sep=' ')
    df.columns = ['1', '2', '3', '4']
    index = df.index
    numb_of_rows = len(index)
    df.insert(0, 'row_num', range(0,len(df)))
    ro = []
    # u = df.columns.values
    # for col in range(len(list(df.columns.values)) - 1):
    #     n = '2'
    for i in range(len(ix_rows)):
        # print(ix_rows[i])
        # if df.columns.values[n] == '2':
        k = df.loc[df[n] == int(ix_rows[i])]
        # print(k.row_num)
        ro.append(int(k.row_num))

    # k = df['1'].where(df['1'] == 1630)
    # print(k)

    # for j in range(len(ro)):
    #     print(ro[j])
    return ro

def takeValue(n, t):
    k = 'C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\k.csv'
    cleanFile(k)
    df_asdf = pd.read_csv("C:\\Users\\aleks\\OneDrive\\Pulpit\\data_preprocessed_python\\asdf.csv", sep=' ')
    df_asdf.columns =  ['ch1', 'ch2', 'ch3', 'ch4']
    df_asdf.insert(0, 'row_num', range(0, len(df_asdf)))
    # print(df_asdf)
    r = takeR(n)
    # print(r)
    with open(k, 'a') as file:
        for i in range(len(r)):
            k = df_asdf.loc[df_asdf['row_num'] == int(r[i])]
            # print(float(k[t]))
            file.write(str(float(k[t])) + str(' '))
            file.write('\n')
        print(k.ch1)


# first = ['1', '2', '3']
# sec = ['ch1', 'ch2', 'ch3']
# for i in range(len(first)):
#     if first[i] == '1':
#         cleanFile(q)
#         takeValue(first[i], sec[i])
#         copyToOtherFile(q, k)
#     else:
#         takeValue(first[i], sec[i])
#         mergeLabelsWithChannels(q, fftValues, k)
#         copyToOtherFile(q, fftValues)
